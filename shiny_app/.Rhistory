weight = 1,
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "black",
fillOpacity = 0.8,
bringToFront = TRUE),
label = labels,
labelOptions = leaflet::labelOptions(
style = baselist("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")) %>%
leaflet::addLegend(colors = qpal_colors, labels = qpal_labs,
values = map_df()$value, opacity = 0.7, title = NULL,
position = "bottomright")
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(sf)
library(leaflet)
library(utils)
library(rnaturalearth)
library(stats)
library(htmltools)
# transposition de data.frame
transpose_df <- function(df){
df %>%
t() %>%   #Tranpose, but function is for matrices. Return Matrix
as.data.frame() %>%   #Force to be dataframe
tibble::rownames_to_column(var = "rowname") %>%  #Resave first column from rownames
janitor::row_to_names(row_number = 1) %>%  #Resave column headers from first row.
tibble() %>% # recast to tibble class
dplyr::mutate(across(-1, stringr::str_trim, .names = "{.col}")) %>%
dplyr::mutate(across(-1, as.numeric, .names = "{.col}"))
}
# Téléchargement des données COVID depuis GitHub
url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
covid_data = utils::read.csv(url)
covid_data = covid_data %>%
dplyr::select(-Province.State, -Lat, -Long) %>%
dplyr::group_by(Country.Region) %>%
dplyr::summarise(across(-1, sum, .names = "{.col}"))
# transpose data
covid_data.transposed<- transpose_df(covid_data) %>%
dplyr::mutate(
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("."), "/"),
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("X"), "")
)
# change name of first column
names(covid_data.transposed)[1]<- "Date"
# format data
covid_data.transposed<- covid_data.transposed %>%
dplyr::mutate(Date = lubridate::mdy(Date))
# get world states boundaries
world_shp<- rnaturalearth::ne_countries()["name_en"]
ui = shiny::fluidPage(
shiny::titlePanel("Covid-19 : Cas positifs (confirmés et probable) du 20 mars 2020 au 29 mars 2023 (source : JHU CSSE COVID-19 Dataset)"),
shiny::sidebarLayout(
sidebarPanel = shiny::sidebarPanel(
shiny::sliderInput("date",
label = "Date à afficher",
value = base::mean(covid_data.transposed$Date),
min = lubridate::ymd("2020-03-20"),
max = base::max(covid_data.transposed$Date),
step = 1,
timeFormat = "%F",
width="100%"),
shiny::hr(), shiny::hr(),
shiny::HTML(base::paste0(
"Le 10 mars 2023, le Johns Hopkins Coronavirus Resource Center cessera a mis fin à ses activités.",
" de collecte des données Covid-19. Voir ",
"<a href='https://www.who.int/'> la World Health Organization (WHO/OMM) </a>",
"pour des mises à jour continues."
)),
shiny::hr(), shiny::hr(),
shiny::HTML("&copy; Copyright 2024, Marieme KEBE")
),
mainPanel = shiny::mainPanel(
leaflet::leafletOutput(outputId = 'map')
# shinycssloaders::withSpinner(leafletOutput(outputId = 'map'))
)
)
)
server = function(input, output){
# filter data set with sected date
map_df = shiny::reactive({
# filtrer les données par la date choisie
covid_data_filter<- transpose_df(
covid_data.transposed %>%
dplyr::filter(Date == input$date[1])
)
names(covid_data_filter)<- c("name_en", "value")
# géoréférencement des données par jointure
dplyr::inner_join(world_shp, covid_data_filter, by="name_en")
})
output$map = leaflet::renderLeaflet({
# custom labels
labels <- sprintf(
"<strong>%s</strong><br/>%g cas positifs",
map_df()$name_en, map_df()$value
) %>% base::lapply(htmltools::HTML)
# Reverse the color palette
qpal <- leaflet::colorQuantile("Reds", map_df()$value, n = 5)
# the extra code building off the existing pal
qpal_colors <- unique(qpal(sort(map_df()$value))) # hex codes
qpal_labs <- quantile(map_df()$value, seq(0, 1, .2)) # depends on n from pal
qpal_labs <- base::paste(stats::lag(qpal_labs), qpal_labs, sep = " - ")[-1] # first lag is NA
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::setView(
lng = 26.17, lat = 5.65, zoom = 2
) %>%
leaflet::addPolygons(data = map_df(),
fillColor = ~leaflet::colorQuantile("Reds", value)(value),
fillOpacity = 1,
color = "white",
weight = 1,
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "black",
fillOpacity = 0.8,
bringToFront = TRUE),
label = labels,
labelOptions = leaflet::labelOptions(
style = baselist("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")) %>%
leaflet::addLegend(colors = qpal_colors, labels = qpal_labs,
values = map_df()$value, opacity = 0.7, title = NULL,
position = "bottomright")
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(sf)
library(leaflet)
library(utils)
library(rnaturalearth)
library(stats)
library(htmltools)
# transposition de data.frame
transpose_df <- function(df){
df %>%
t() %>%   #Tranpose, but function is for matrices. Return Matrix
as.data.frame() %>%   #Force to be dataframe
tibble::rownames_to_column(var = "rowname") %>%  #Resave first column from rownames
janitor::row_to_names(row_number = 1) %>%  #Resave column headers from first row.
tibble() %>% # recast to tibble class
dplyr::mutate(across(-1, stringr::str_trim, .names = "{.col}")) %>%
dplyr::mutate(across(-1, as.numeric, .names = "{.col}"))
}
# Téléchargement des données COVID depuis GitHub
url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
covid_data = utils::read.csv(url)
covid_data = covid_data %>%
dplyr::select(-Province.State, -Lat, -Long) %>%
dplyr::group_by(Country.Region) %>%
dplyr::summarise(across(-1, sum, .names = "{.col}"))
# transpose data
covid_data.transposed<- transpose_df(covid_data) %>%
dplyr::mutate(
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("."), "/"),
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("X"), "")
)
# change name of first column
names(covid_data.transposed)[1]<- "Date"
# format data
covid_data.transposed<- covid_data.transposed %>%
dplyr::mutate(Date = lubridate::mdy(Date))
# get world states boundaries
world_shp<- rnaturalearth::ne_countries()["name_en"]
ui = shiny::fluidPage(
shiny::titlePanel("Covid-19 : Cas positifs (confirmés et probable) du 20 mars 2020 au 29 mars 2023 (source : JHU CSSE COVID-19 Dataset)"),
shiny::sidebarLayout(
sidebarPanel = shiny::sidebarPanel(
shiny::sliderInput("date",
label = "Date à afficher",
value = base::mean(covid_data.transposed$Date),
min = lubridate::ymd("2020-03-20"),
max = base::max(covid_data.transposed$Date),
step = 1,
timeFormat = "%F",
width="100%"),
shiny::hr(), shiny::hr(),
shiny::HTML(base::paste0(
"Le 10 mars 2023, le Johns Hopkins Coronavirus Resource Center cessera a mis fin à ses activités.",
" de collecte des données Covid-19. Voir ",
"<a href='https://www.who.int/'> la World Health Organization (WHO/OMM) </a>",
"pour des mises à jour continues."
)),
shiny::hr(), shiny::hr(),
shiny::HTML("&copy; Copyright 2024, Marieme KEBE")
),
mainPanel = shiny::mainPanel(
leaflet::leafletOutput(outputId = 'map')
# shinycssloaders::withSpinner(leafletOutput(outputId = 'map'))
)
)
)
server = function(input, output){
# filter data set with sected date
map_df = shiny::reactive({
# filtrer les données par la date choisie
covid_data_filter<- transpose_df(
covid_data.transposed %>%
dplyr::filter(Date == input$date[1])
)
names(covid_data_filter)<- c("name_en", "value")
# géoréférencement des données par jointure
dplyr::inner_join(world_shp, covid_data_filter, by="name_en")
})
output$map = leaflet::renderLeaflet({
# custom labels
labels <- sprintf(
"<strong>%s</strong><br/>%g cas positifs",
map_df()$name_en, map_df()$value
) %>% base::lapply(htmltools::HTML)
# Reverse the color palette
qpal <- leaflet::colorQuantile("Reds", map_df()$value, n = 5)
# the extra code building off the existing pal
qpal_colors <- unique(qpal(sort(map_df()$value))) # hex codes
qpal_labs <- quantile(map_df()$value, seq(0, 1, .2)) # depends on n from pal
qpal_labs <- base::paste(stats::lag(qpal_labs), qpal_labs, sep = " - ")[-1] # first lag is NA
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::setView(
lng = 26.17, lat = 5.65, zoom = 2
) %>%
leaflet::addPolygons(data = map_df(),
fillColor = ~leaflet::colorQuantile("Reds", value)(value),
fillOpacity = 1,
color = "white",
weight = 1,
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "black",
fillOpacity = 0.8,
bringToFront = TRUE),
label = labels,
labelOptions = leaflet::labelOptions(
style = base::list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")) %>%
leaflet::addLegend(colors = qpal_colors, labels = qpal_labs,
values = map_df()$value, opacity = 0.7, title = NULL,
position = "bottomright")
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(sf)
library(leaflet)
library(utils)
library(rnaturalearth)
library(stats)
library(htmltools)
# transposition de data.frame
transpose_df <- function(df){
df %>%
t() %>%   #Tranpose, but function is for matrices. Return Matrix
as.data.frame() %>%   #Force to be dataframe
tibble::rownames_to_column(var = "rowname") %>%  #Resave first column from rownames
janitor::row_to_names(row_number = 1) %>%  #Resave column headers from first row.
tibble() %>% # recast to tibble class
dplyr::mutate(across(-1, stringr::str_trim, .names = "{.col}")) %>%
dplyr::mutate(across(-1, as.numeric, .names = "{.col}"))
}
# Téléchargement des données COVID depuis GitHub
url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
covid_data = utils::read.csv(url)
covid_data = covid_data %>%
dplyr::select(-Province.State, -Lat, -Long) %>%
dplyr::group_by(Country.Region) %>%
dplyr::summarise(across(-1, sum, .names = "{.col}"))
# transpose data
covid_data.transposed<- transpose_df(covid_data) %>%
dplyr::mutate(
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("."), "/"),
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("X"), "")
)
# change name of first column
names(covid_data.transposed)[1]<- "Date"
# format data
covid_data.transposed<- covid_data.transposed %>%
dplyr::mutate(Date = lubridate::mdy(Date))
# get world states boundaries
world_shp<- rnaturalearth::ne_countries()["name_en"]
ui = shiny::fluidPage(
shiny::titlePanel("Covid-19 : Cas positifs (confirmés et probable) du 20 mars 2020 au 29 mars 2023 (source : JHU CSSE COVID-19 Dataset)"),
shiny::sidebarLayout(
sidebarPanel = shiny::sidebarPanel(
shiny::sliderInput("date",
label = "Date à afficher",
value = base::mean(covid_data.transposed$Date),
min = lubridate::ymd("2020-03-20"),
max = base::max(covid_data.transposed$Date),
step = 1,
timeFormat = "%F",
width="100%"),
shiny::hr(), shiny::hr(),
shiny::HTML(base::paste0(
"Le 10 mars 2023, le Johns Hopkins Coronavirus Resource Center cessera a mis fin à ses activités.",
" de collecte des données Covid-19. Voir ",
"<a href='https://www.who.int/'> la World Health Organization (WHO/OMM) </a>",
"pour des mises à jour continues."
)),
shiny::hr(),
shiny::HTML("&copy; Copyright 2024, Marieme KEBE")
),
mainPanel = shiny::mainPanel(
leaflet::leafletOutput(outputId = 'map')
# shinycssloaders::withSpinner(leafletOutput(outputId = 'map'))
)
)
)
server = function(input, output){
# filter data set with sected date
map_df = shiny::reactive({
# filtrer les données par la date choisie
covid_data_filter<- transpose_df(
covid_data.transposed %>%
dplyr::filter(Date == input$date[1])
)
names(covid_data_filter)<- c("name_en", "value")
# géoréférencement des données par jointure
dplyr::inner_join(world_shp, covid_data_filter, by="name_en")
})
output$map = leaflet::renderLeaflet({
# custom labels
labels <- sprintf(
"<strong>%s</strong><br/>%g cas positifs",
map_df()$name_en, map_df()$value
) %>% base::lapply(htmltools::HTML)
# Reverse the color palette
qpal <- leaflet::colorQuantile("Reds", map_df()$value, n = 5)
# the extra code building off the existing pal
qpal_colors <- unique(qpal(sort(map_df()$value))) # hex codes
qpal_labs <- quantile(map_df()$value, seq(0, 1, .2)) # depends on n from pal
qpal_labs <- base::paste(stats::lag(qpal_labs), qpal_labs, sep = " - ")[-1] # first lag is NA
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::setView(
lng = 26.17, lat = 5.65, zoom = 2
) %>%
leaflet::addPolygons(data = map_df(),
fillColor = ~leaflet::colorQuantile("Reds", value)(value),
fillOpacity = 1,
color = "white",
weight = 1,
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "black",
fillOpacity = 0.8,
bringToFront = TRUE),
label = labels,
labelOptions = leaflet::labelOptions(
style = base::list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")) %>%
leaflet::addLegend(colors = qpal_colors, labels = qpal_labs,
values = map_df()$value, opacity = 0.7, title = NULL,
position = "bottomright")
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(shiny)
library(sf)
library(leaflet)
library(utils)
library(rnaturalearth)
library(stats)
library(htmltools)
# transposition de data.frame
transpose_df <- function(df){
df %>%
t() %>%   #Tranpose, but function is for matrices. Return Matrix
as.data.frame() %>%   #Force to be dataframe
tibble::rownames_to_column(var = "rowname") %>%  #Resave first column from rownames
janitor::row_to_names(row_number = 1) %>%  #Resave column headers from first row.
tibble() %>% # recast to tibble class
dplyr::mutate(across(-1, stringr::str_trim, .names = "{.col}")) %>%
dplyr::mutate(across(-1, as.numeric, .names = "{.col}"))
}
# Téléchargement des données COVID depuis GitHub
url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
covid_data = utils::read.csv(url)
covid_data = covid_data %>%
dplyr::select(-Province.State, -Lat, -Long) %>%
dplyr::group_by(Country.Region) %>%
dplyr::summarise(across(-1, sum, .names = "{.col}"))
# transpose data
covid_data.transposed<- transpose_df(covid_data) %>%
dplyr::mutate(
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("."), "/"),
Country.Region = stringr::str_replace_all(Country.Region, stringr::fixed("X"), "")
)
# change name of first column
names(covid_data.transposed)[1]<- "Date"
# format data
covid_data.transposed<- covid_data.transposed %>%
dplyr::mutate(Date = lubridate::mdy(Date))
# get world states boundaries
world_shp<- rnaturalearth::ne_countries()["name_en"]
ui = shiny::fluidPage(
shiny::titlePanel("Covid-19 : Cas positifs (confirmés et probable) du 20 mars 2020 au 29 mars 2023 (source : JHU CSSE COVID-19 Dataset)"),
shiny::sidebarLayout(
sidebarPanel = shiny::sidebarPanel(
shiny::sliderInput("date",
label = "Date à afficher",
value = base::mean(covid_data.transposed$Date),
min = lubridate::ymd("2020-03-20"),
max = base::max(covid_data.transposed$Date),
step = 1,
timeFormat = "%F",
width="100%"),
shiny::hr(), shiny::hr(),
shiny::HTML(base::paste0(
"Le 10 mars 2023, le Johns Hopkins Coronavirus Resource Center cessera a mis fin à ses activités.",
" de collecte des données Covid-19. Voir ",
"<a href='https://www.who.int/'> la World Health Organization (WHO/OMM) </a>",
"pour des mises à jour continues."
)),
shiny::hr(), shiny::hr(),
shiny::HTML("&copy; Copyright 2024, Marieme KEBE")
),
mainPanel = shiny::mainPanel(
leaflet::leafletOutput(outputId = 'map')
# shinycssloaders::withSpinner(leafletOutput(outputId = 'map'))
)
)
)
server = function(input, output){
# filter data set with sected date
map_df = shiny::reactive({
# filtrer les données par la date choisie
covid_data_filter<- transpose_df(
covid_data.transposed %>%
dplyr::filter(Date == input$date[1])
)
names(covid_data_filter)<- c("name_en", "value")
# géoréférencement des données par jointure
dplyr::inner_join(world_shp, covid_data_filter, by="name_en")
})
output$map = leaflet::renderLeaflet({
# custom labels
labels <- sprintf(
"<strong>%s</strong><br/>%g cas positifs",
map_df()$name_en, map_df()$value
) %>% base::lapply(htmltools::HTML)
# Reverse the color palette
qpal <- leaflet::colorQuantile("Reds", map_df()$value, n = 5)
# the extra code building off the existing pal
qpal_colors <- unique(qpal(sort(map_df()$value))) # hex codes
qpal_labs <- quantile(map_df()$value, seq(0, 1, .2)) # depends on n from pal
qpal_labs <- base::paste(stats::lag(qpal_labs), qpal_labs, sep = " - ")[-1] # first lag is NA
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::setView(
lng = 26.17, lat = 5.65, zoom = 2
) %>%
leaflet::addPolygons(data = map_df(),
fillColor = ~leaflet::colorQuantile("Reds", value)(value),
fillOpacity = 1,
color = "white",
weight = 1,
highlightOptions = leaflet::highlightOptions(
weight = 2,
color = "black",
fillOpacity = 0.8,
bringToFront = TRUE),
label = labels,
labelOptions = leaflet::labelOptions(
style = base::list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto")) %>%
leaflet::addLegend(colors = qpal_colors, labels = qpal_labs,
values = map_df()$value, opacity = 0.7, title = NULL,
position = "bottomright")
})
}
shinyApp(ui, server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bachir', token='4A184DD874DA88A5311D53643E7CA49B', secret='IuCCcbiMU++7wdcpbXiRbpVg9zUbjZpDdU0+5P+L')
update.packages('rsconnect')
update.packages('rsconnect')
rsconnect::setAccountInfo(name='bachir', token='4A184DD874DA88A5311D53643E7CA49B', secret='IuCCcbiMU++7wdcpbXiRbpVg9zUbjZpDdU0+5P+L')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bachir', token='4A184DD874DA88A5311D53643E7CA49B', secret='IuCCcbiMU++7wdcpbXiRbpVg9zUbjZpDdU0+5P+L')
library(rsconnect)
rsconnect::deployApp("C:/Users/hp/Documents/hayati/M2/web_mapping/shiny_app")
library(rsconnect)
rsconnect::deployApp("C:/Users/hp/Documents/hayati/M2/web_mapping/shiny_app")
rsconnect::deployApp("C:/Users/hp/Documents/hayati/M2/web_mapping/shiny_app")
rsconnect::deployApp("C:/Users/hp/Documents/hayati/M2/web_mapping/shiny_app")
rsconnect::deployApp("C:/Users/hp/Documents/hayati/M2/web_mapping/shiny_app")
